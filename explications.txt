on écrit les tâches dans task_repository sous la forme 0_id ; 1_title ; 2_descr ; 3_date_creation ; 4_date_end ; 5_priority ;
						       6_status ; 7_progress ; 8_sous-tâches ; 9_com

Pour les sous-tâches, je fais une string où les identifiants sont séparés par des espaces : "id1 id2 id3"


arguments d'entrée : indices
0 : ack
1 : create ; change ; display ; list ; ajouter

1 create :
    2 : --title
    3 : "le titre"
    
    optionnel		Pour savoir dans quel cas on est, on utilise argc qui va donner 6 8 ou 10
    4 : --description
    5 : "la description"
    6 : --priorité
    7 : "la priorité"
    8 : --statut
    9 : "le statut"
    RAJOUTER COM ET SS TACHES

1 change :
    tous les attributs d'une task
    2 : --attributs
    3 : "date de début" ; "date de fin" ; "description" ; "status" ; "progrès" ; "priorité"
    4 : --nouvel_attribut
    5 : dd/mm/yyyy ; "la description / le status / la priorité" ; "x%"


OU ALORS je récupère ce qu'ils veulent faire étape par étape avec des cin
CEST BEAUCOUP MIEUX !!!! Nouvelle structure :

ATTENTION: se débrouiller pour qu'il ny ait pas de ";" dans les requêtes des gens

1. Demande de l'action

	amélioration : Pour tous les demandeX() qui renvoient un string, en faire un seul qui prend en argument la question en string
	
	Si "create":
		demande du titre, de la descript, du status, de la priorité, et on crée la tâche		IL MANQUE LES SS-TACHES !!!!!
	Si "change":
		demander l'id de la tâche à changer
		tester l'existence de cette tâche, si oui on avance, sinon msg d'erreur
		demander l'élément à changer : date fin, priorité, status, progression ->
		
		(un tableau avec ces 4 là, un for qui teste le getline par rapport au tableau,
		pas sûr que ça aide vrmt, c'est juste si on arrive à faire correspondre l'indice du tableau avec celui du repository)
		
		FAIRE MSG DERREUR SI LINPUT EST PAS UN ELEMENT OFFICIEL avec un while jusquà ce que ça soit bon
		demander la nouvelle valeur
		modifier la ligne en conséquence -> se mettre au bon endroit ; supprimer l'ancienne valeur ; mettre la nouvelle
	si "delete":
		demander l'identifiant
		tester l'existence de cette tâche, si oui on avance, sinon msg d'erreur
		la supprimer (comme les fct change sauf quon réécrit pas la ligne en question)
	si "show":PAS ENCORE FAIT
		demander d'abord l'attribut selon lequel on veut afficher
		demander la valeur de cet attribut
		lire le fichier, à chaque ligne, créer la tache, tester la valeur de l'attribut, la print ou non


qd on crée une sous-tache, rajouter un test d'existence de la ss tache

ATTENTION quand je rajouterai com et ss taches, faudra faire gaffe aux longueurs des tabl dans le convertisseur txt/task


A plusieurs reprises, j'ai besoin de découper une string contenant plusieurs éléments séparés par un certain marqueur.
Pour ça, je parcours la string et stocke toutes les positions de ce marqueur dans un tableau (je connais le nbr exact de marqueur à
chaque fois), puis j'extrais chaque substring avec substr()

A RAJOUTER :
les comms-> si on fait des tableaux, faire gaffe à avoir des marqueurs différents des séparateurs d'attributs
				changer les nombres d'attributs dans les convertisseurs txt/task


Pour la partie change, demander si cest possible de faire un tableau avec des instructions, comme ça la partie à modifier correspond à un
entier qui indique dans le tableau l'action a effectuer. (les mettre en string et les dé-stringer ?)

pas très clair entre write_task et task.write(), renvoient meme pas le meme type

problème mineur : quand on modifie une tâche dont la priorité ou le status nont pas été renseigné, on se prend un msg parasite
		  de la non existence de ces attributs, mais ça pose aucun problème, ni pour les modifier, ni pour le reste

expliquer l'utilisation de chaque lib
